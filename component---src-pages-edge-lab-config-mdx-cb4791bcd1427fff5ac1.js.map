{"version":3,"sources":["webpack:///../instana-lab/src/pages/edge-lab/config.mdx"],"names":["_frontmatter","makeShortcode","name","props","console","warn","PageDescription","InlineNotification","Accordion","AccordionItem","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","kind","title","isMDXComponent"],"mappings":"wPAQaA,G,UAAe,IAEtBC,EAAgB,SAAAC,GAAI,OAAI,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,2EAC5B,kBAASC,KAGZG,EAAkBL,EAAc,mBAChCM,EAAqBN,EAAc,sBACnCO,EAAYP,EAAc,aAC1BQ,EAAgBR,EAAc,iBAC9BS,EAAc,CAClBV,gBAEIW,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGX,EACF,8BACD,OAAO,YAACQ,EAAD,eAAeD,EAAiBP,EAAhC,CAAuCW,WAAYA,EAAYC,QAAQ,cAG5E,YAACT,EAAD,CAAiBS,QAAQ,mBACvB,sFAEF,6DACA,uBAAK,gCAAMC,WAAW,OAAU,IAA3B,65DA4BL,YAACT,EAAD,CAAoBU,KAAK,OAAOF,QAAQ,sBACtC,qBAAG,sBAAQC,WAAW,KAAnB,SAAH,6CAEF,yDACA,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,sWAKL,wCACA,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,gLAML,iCAAgB,6BAAGA,WAAW,KAAQ,CAClC,KAAQ,sCADI,iBAGhB,4GACF,+BAAKA,WAAW,KAAQ,CAClB,IAAO,2BACP,IAAO,kBAEX,YAACR,EAAD,CAAWO,QAAQ,aACrB,YAACN,EAAD,CAAeS,MAAM,SAASH,QAAQ,iBAChC,qCAORF,EAAWM,gBAAiB","file":"component---src-pages-edge-lab-config-mdx-cb4791bcd1427fff5ac1.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/mkeppel/Documents/GitHub/instana-lab/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst PageDescription = makeShortcode(\"PageDescription\");\nconst InlineNotification = makeShortcode(\"InlineNotification\");\nconst Accordion = makeShortcode(\"Accordion\");\nconst AccordionItem = makeShortcode(\"AccordionItem\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <PageDescription mdxType=\"PageDescription\">\n      <p>{`In this section you find instruction for setting up the lab.`}</p>\n    </PageDescription>\n    <h2>{`Agent Installation and Registration`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`export CLUSTER_URL=https://$(oc get cm management-ingress-ibmcloud-cluster-info -o jsonpath='{.data.cluster_ca_domain}')\nexport ADMIN_USER=$(oc -n ibm-common-services get secret platform-auth-idp-credentials -o jsonpath='{.data.admin_username}' | base64 --decode)\nexport ADMIN_PWD=$(oc -n ibm-common-services get secret platform-auth-idp-credentials -o jsonpath='{.data.admin_password}' | base64 --decode)\ncloudctl login -a $CLUSTER_URL -u $ADMIN_USER -p ADMIN_PWD --skip-ssl-validation -n ibm-edge\n\nexport ROOT_PASS=$(oc get secret $CUSTOM_RESOURCE-auth -o jsonpath='{.data.exchange-root-pass}' | base64 --decode | grep '.*')\nexport CUSTOM_RESOURCE=$(oc get eamhub | grep -c -v NAME)\nexport EDGE_AGBOT_ID=$(oc get cm $CUSTOM_RESOURCE-config -o jsonpath=\"{.data.agbot_id}\" | grep '.*')\nexport CA_DOMAIN=$(oc get cm management-ingress-ibmcloud-cluster-info -o jsonpath='{.data.cluster_ca_domain}'\nexport HZN_EXCHANGE_URL=https://$CA_DOMAIN/edge-exchange/v1\nexport HZN_EXCHANGE_USER_AUTH=\"root/root:$ROOT_PASS\"\nexport CLUSTER_CA_CERT=$(oc get secret management-ingress-ibmcloud-cluster-ca-cert -o jsonpath=\"{.data['ca\\\\.crt']}\" | base64 --decode | grep '.*')\necho \"$CLUSTER_CA_CERT\" > /tmp/ieam_cluster_ca.crt\nexport HZN_MGMT_HUB_CERT_PATH=/tmp/ieam_cluster_ca.crt\nexport NEW_ORG_ID=thinkedge\ncloudctl iam roles\ncloudctl iam groups\ncloudctl iam teams\ncloudctl iam accounts\nexport IAM_ACCOUNT_NAME='mycluster Account'\nIAM_ACCOUNT_ID=$(cloudctl iam account \"$IAM_ACCOUNT_NAME\" | grep -E '^ID' | awk '{print $2}')\n# export IAM_TEAM_ID=$(cloudctl iam teams -s | grep -m 1 \"$IAM_ACCOUNT_NAME\" | awk '{print $1}')\nexport IAM_TEAM_ID=edgeadmins\nexport IAM_RESOURCE_ID=$(cloudctl iam resources | grep ':n/ibm-edge:')\ncloudctl iam resource-add $IAM_TEAM_ID -r $IAM_RESOURCE_ID\nhzn exchange user create -o $NEW_ORG_ID -A markus \"\" \"markus@does.not.exist\"\nhzn exchange user setadmin 'markus' 'true' -o $NEW_ORG_ID\n`}</code></pre>\n    <InlineNotification kind=\"info\" mdxType=\"InlineNotification\">\n      <p><strong parentName=\"p\">{`Note:`}</strong>{` These steps above are not all required.`}</p>\n    </InlineNotification>\n    <h2>{`Create an API-key for each user`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`IAM_USER=<iam-user>\ncloudctl login -a <cluster-url> -u $IAM_USER -p <iam-user-password> -c $IAM_ACCOUNT_ID --skip-ssl-validation\ncloudctl iam api-key-create \"\\${IAM_USER}-api-key\" -d \"API key for $IAM_USER\"\n# IAM_USER_API_KEY=$(cloudctl iam api-key-create \"\\${IAM_USER}-api-key\" -d \"API key for $IAM_USER\" | grep -E '^API Key' | awk '{print $3}')\n`}</code></pre>\n    <h2>{`Verify API-key`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`IAM_USER_API_KEY=<IAM API key you just created>\n\nexport HZN_ORG_ID=<organization-id>\nexport HZN_EXCHANGE_USER_AUTH=iamapikey:$IAM_USER_API_KEY\nhzn exchange user list\n`}</code></pre>\n    <p>{`To check `}<a parentName=\"p\" {...{\n        \"href\": \"/think-labs/edge-lab/requirements\"\n      }}>{`Requirements`}</a></p>\n    <p>{`The IBM Edge Application Manager should not list any or your device as shown below\n`}<img parentName=\"p\" {...{\n        \"src\": \"./images/IEAM-nonode.png\",\n        \"alt\": \"IEAM-nonode\"\n      }}></img></p>\n    <Accordion mdxType=\"Accordion\">\n  <AccordionItem title=\"output\" mdxType=\"AccordionItem\">\n        <p>{`Some text`}</p>\n  </AccordionItem>\n    </Accordion>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}