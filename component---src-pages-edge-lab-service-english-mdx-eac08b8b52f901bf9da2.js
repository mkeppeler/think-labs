(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{LNwV:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return b})),n.d(t,"default",(function(){return h}));var o=n("vxd2"),a=n("+ZQ4"),r=(n("tbR7"),n("8ZXK")),c=n("ZUrL"),b=(n("GP0y"),{}),i=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),Object(r.b)("div",t)}},l=i("PageDescription"),s=i("Accordion"),p=i("AccordionItem"),d=i("Tabs"),u=i("Tab"),j=i("InlineNotification"),O={_frontmatter:b},m=c.a;function h(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(r.b)(m,Object(o.a)({},O,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)(l,{mdxType:"PageDescription"},Object(r.b)("p",null,"In this section you will create/develop a sample service, which you will publish to the IBM Edge Application Manager and deploy in a later step.")),Object(r.b)("h2",null,"Creating Your Own Hello World Edge Service"),Object(r.b)("p",null,"Follow the steps on this page to create your first simple Horizon edge service.\nPreconditions for developing your own service"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"If you have not already done so, complete the steps in these sections:")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(o.a)({parentName:"li"},{href:"/think-labs/edge-lab/requirements/english"}),"Requirements")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(o.a)({parentName:"li"},{href:"/think-labs/edge-lab/connect/english"}),"Connect your Device"))),Object(r.b)("ol",{start:2},Object(r.b)("li",{parentName:"ol"},"If you are using macOS as your development host, configure Docker to store credentials in ~/.docker:")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Open the Docker Preferences dialog"),Object(r.b)("li",{parentName:"ul"},"Uncheck Securely store Docker logins in macOS keychain")),Object(r.b)("ol",{start:3},Object(r.b)("li",{parentName:"ol"},"If you do not already have a docker ID, obtain one at ",Object(r.b)("a",Object(o.a)({parentName:"li"},{href:"https://hub.docker.com/"}),"hub.docker.com")," . Log in to Docker Hub using your Docker Hub ID:")),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{}),'export DOCKER_HUB_ID="<dockerhubid>"\necho "<dockerhubpassword>" | docker login -u $DOCKER_HUB_ID --password-stdin\n')),Object(r.b)("p",null,"Output example:"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{}),"WARNING! Your password will be stored unencrypted in /home/pi/.docker/config.json.\nConfigure a credential helper to remove this warning. See\nhttps://docs.docker.com/engine/reference/commandline/login/#credentials-store\n\nLogin Succeeded\n")),Object(r.b)("ol",{start:4},Object(r.b)("li",{parentName:"ol"},"Create a cryptographic signing key pair. This enables you to sign services when publishing them to the exchange. This step only needs to be done once.")),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{}),'hzn key create "<x509-org>" "<x509-cn>"\n')),Object(r.b)("p",null,"where ","<","x509-org",">"," is your company name, and ","<","x509-cn",">"," is typically set to your email address."),Object(r.b)(s,{mdxType:"Accordion"},Object(r.b)(p,{title:"hzn key create output",mdxType:"AccordionItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-bash"}),'$ hzn key create "<x509-org>" "<x509-cn>"\nCreating RSA PSS private and public keys, and an x509 certificate for distribution. This is a CPU-intensive operation and, depending on key length and platform, may take a while. Key generation on an amd64 or ppc64 system using the default key length will complete in less than 1 minute.\nCreated keys:\n    /root/.hzn/keys/service.private.key\n    /root/.hzn/keys/service.public.pem\n')))),Object(r.b)("ol",{start:5},Object(r.b)("li",{parentName:"ol"},"Install git and jq:")),Object(r.b)(d,{mdxType:"Tabs"},Object(r.b)(u,{label:"RHEL",mdxType:"Tab"},Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{}),"sudo yum install -y git jq\n"))),Object(r.b)(u,{label:"Raspian/Ubuntu",mdxType:"Tab"},Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{}),"sudo apt install -y git jq\n"))),Object(r.b)(u,{label:"macOS",mdxType:"Tab"},Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{}),"brew install git jq\n")))),Object(r.b)("h2",null,"Building and Publishing the edge service"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"cd to the directory in which you want to create your new service and then run this command to create the files for a simple edge service and associated Horizon metadata files:")),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{}),'export USER_ID=$DOCKER_HUB_ID\nexport HZN_ORG_ID=<your-org>\nhzn dev service new -s hello-$USER_ID -i "$DOCKER_HUB_ID/hello-$USER_ID"\n')),Object(r.b)(s,{mdxType:"Accordion"},Object(r.b)(p,{title:"file created",mdxType:"AccordionItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-bash"}),".\n├── Dockerfile.amd64\n├── Dockerfile.arm\n├── Dockerfile.arm64\n├── horizon\n│   ├── dependencies\n│   ├── hzn.json\n│   ├── pattern-all-arches.json\n│   ├── pattern.json\n│   ├── service.definition.json\n│   ├── service.policy.json\n│   └── userinput.json\n├── Makefile\n└── service.sh\n")))),Object(r.b)(j,{kind:"info",mdxType:"InlineNotification"},Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Notice")," that some project variables are defined in horizon/hzn.json and referenced in other files, for example horizon/service.definition.json.")),Object(r.b)("ol",{start:2},Object(r.b)("li",{parentName:"ol"},"Edit service.sh and change something simple, for example change “Hello” to “Hey there”")),Object(r.b)(j,{kind:"info",mdxType:"InlineNotification"},Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Note:")," This service is a shell script for brevity, but you can write your service in any language.")),Object(r.b)("ol",{start:3},Object(r.b)("li",{parentName:"ol"},"Build the service docker image:")),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{}),"make\n")),Object(r.b)("ol",{start:4},Object(r.b)("li",{parentName:"ol"},"Test the service by running it the simulated agent environment:")),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{}),"sudo hzn dev service start -S\n")),Object(r.b)("ol",{start:5},Object(r.b)("li",{parentName:"ol"},"Check that the container is running:")),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{}),"sudo docker ps\n")),Object(r.b)("ol",{start:6},Object(r.b)("li",{parentName:"ol"},"Display the environment variables Horizon passes into your service container:")),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{}),"sudo docker inspect $(sudo docker ps -q --filter name=hello-$USER_ID) | jq '.[0].Config.Env'\n")),Object(r.b)("ol",{start:7},Object(r.b)("li",{parentName:"ol"},"See your helloworld service output:")),Object(r.b)(d,{mdxType:"Tabs"},Object(r.b)(u,{label:"RHEL",mdxType:"Tab"},Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{}),"sudo tail -f /var/log/messages | grep hello-$USER_ID\n"))),Object(r.b)(u,{label:"Raspian/Ubuntu",mdxType:"Tab"},Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{}),"sudo tail -f /var/log/syslog | grep hello-$USER_ID\n"))),Object(r.b)(u,{label:"macOS",mdxType:"Tab"},Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{}),"sudo docker logs -f $(sudo docker ps -q --filter name=hello-$USER_ID\n# Press Ctrl-c to stop the output display\n")))),Object(r.b)("ol",{start:8},Object(r.b)("li",{parentName:"ol"},"Stop the service:")),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{}),"sudo hzn dev service stop\n")),Object(r.b)("ol",{start:9},Object(r.b)("li",{parentName:"ol"},"Instruct Horizon to push your docker image to your registry and publish your service in the Horizon Exchange:")),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{}),"hzn exchange service publish -f horizon/service.definition.json\nhzn exchange service list\n")),Object(r.b)("p",null,"If you switch to the IBM Edge Application Manager UI, you should find your service on the ",Object(r.b)("strong",{parentName:"p"},"Services")," tab\n",Object(r.b)("img",Object(o.a)({parentName:"p"},{src:"../images/IEAM-services.png",alt:"IEAM-services"}))),Object(r.b)("p",null,"Click on the service to get the details\n",Object(r.b)("img",Object(o.a)({parentName:"p"},{src:"../images/IEAM-service-details.png",alt:"IEAM-service-details"}))),Object(r.b)("p",null,"You can now proceed and deploy the service in the next part of the lab."))}h.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-edge-lab-service-english-mdx-eac08b8b52f901bf9da2.js.map