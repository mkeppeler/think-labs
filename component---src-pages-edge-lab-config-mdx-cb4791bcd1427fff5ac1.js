(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{FiQB:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return i})),n.d(t,"default",(function(){return b}));var o=n("vxd2"),a=n("+ZQ4"),c=(n("tbR7"),n("8ZXK")),r=n("ZUrL"),i=(n("GP0y"),{}),s=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),Object(c.b)("div",t)}},p=s("PageDescription"),d=s("InlineNotification"),l=s("Accordion"),_=s("AccordionItem"),u={_frontmatter:i},m=r.a;function b(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(c.b)(m,Object(o.a)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(c.b)(p,{mdxType:"PageDescription"},Object(c.b)("p",null,"In this section you find instruction for setting up the lab.")),Object(c.b)("h2",null,"Agent Installation and Registration"),Object(c.b)("pre",null,Object(c.b)("code",Object(o.a)({parentName:"pre"},{}),"export CLUSTER_URL=https://$(oc get cm management-ingress-ibmcloud-cluster-info -o jsonpath='{.data.cluster_ca_domain}')\nexport ADMIN_USER=$(oc -n ibm-common-services get secret platform-auth-idp-credentials -o jsonpath='{.data.admin_username}' | base64 --decode)\nexport ADMIN_PWD=$(oc -n ibm-common-services get secret platform-auth-idp-credentials -o jsonpath='{.data.admin_password}' | base64 --decode)\ncloudctl login -a $CLUSTER_URL -u $ADMIN_USER -p ADMIN_PWD --skip-ssl-validation -n ibm-edge\n\nexport ROOT_PASS=$(oc get secret $CUSTOM_RESOURCE-auth -o jsonpath='{.data.exchange-root-pass}' | base64 --decode | grep '.*')\nexport CUSTOM_RESOURCE=$(oc get eamhub | grep -c -v NAME)\nexport EDGE_AGBOT_ID=$(oc get cm $CUSTOM_RESOURCE-config -o jsonpath=\"{.data.agbot_id}\" | grep '.*')\nexport CA_DOMAIN=$(oc get cm management-ingress-ibmcloud-cluster-info -o jsonpath='{.data.cluster_ca_domain}'\nexport HZN_EXCHANGE_URL=https://$CA_DOMAIN/edge-exchange/v1\nexport HZN_EXCHANGE_USER_AUTH=\"root/root:$ROOT_PASS\"\nexport CLUSTER_CA_CERT=$(oc get secret management-ingress-ibmcloud-cluster-ca-cert -o jsonpath=\"{.data['ca\\.crt']}\" | base64 --decode | grep '.*')\necho \"$CLUSTER_CA_CERT\" > /tmp/ieam_cluster_ca.crt\nexport HZN_MGMT_HUB_CERT_PATH=/tmp/ieam_cluster_ca.crt\nexport NEW_ORG_ID=thinkedge\ncloudctl iam roles\ncloudctl iam groups\ncloudctl iam teams\ncloudctl iam accounts\nexport IAM_ACCOUNT_NAME='mycluster Account'\nIAM_ACCOUNT_ID=$(cloudctl iam account \"$IAM_ACCOUNT_NAME\" | grep -E '^ID' | awk '{print $2}')\n# export IAM_TEAM_ID=$(cloudctl iam teams -s | grep -m 1 \"$IAM_ACCOUNT_NAME\" | awk '{print $1}')\nexport IAM_TEAM_ID=edgeadmins\nexport IAM_RESOURCE_ID=$(cloudctl iam resources | grep ':n/ibm-edge:')\ncloudctl iam resource-add $IAM_TEAM_ID -r $IAM_RESOURCE_ID\nhzn exchange user create -o $NEW_ORG_ID -A markus \"\" \"markus@does.not.exist\"\nhzn exchange user setadmin 'markus' 'true' -o $NEW_ORG_ID\n")),Object(c.b)(d,{kind:"info",mdxType:"InlineNotification"},Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Note:")," These steps above are not all required.")),Object(c.b)("h2",null,"Create an API-key for each user"),Object(c.b)("pre",null,Object(c.b)("code",Object(o.a)({parentName:"pre"},{}),'IAM_USER=<iam-user>\ncloudctl login -a <cluster-url> -u $IAM_USER -p <iam-user-password> -c $IAM_ACCOUNT_ID --skip-ssl-validation\ncloudctl iam api-key-create "${IAM_USER}-api-key" -d "API key for $IAM_USER"\n# IAM_USER_API_KEY=$(cloudctl iam api-key-create "${IAM_USER}-api-key" -d "API key for $IAM_USER" | grep -E \'^API Key\' | awk \'{print $3}\')\n')),Object(c.b)("h2",null,"Verify API-key"),Object(c.b)("pre",null,Object(c.b)("code",Object(o.a)({parentName:"pre"},{}),"IAM_USER_API_KEY=<IAM API key you just created>\n\nexport HZN_ORG_ID=<organization-id>\nexport HZN_EXCHANGE_USER_AUTH=iamapikey:$IAM_USER_API_KEY\nhzn exchange user list\n")),Object(c.b)("p",null,"To check ",Object(c.b)("a",Object(o.a)({parentName:"p"},{href:"/think-labs/edge-lab/requirements"}),"Requirements")),Object(c.b)("p",null,"The IBM Edge Application Manager should not list any or your device as shown below\n",Object(c.b)("img",Object(o.a)({parentName:"p"},{src:"./images/IEAM-nonode.png",alt:"IEAM-nonode"}))),Object(c.b)(l,{mdxType:"Accordion"},Object(c.b)(_,{title:"output",mdxType:"AccordionItem"},Object(c.b)("p",null,"Some text"))))}b.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-edge-lab-config-mdx-cb4791bcd1427fff5ac1.js.map