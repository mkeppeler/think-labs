{"componentChunkName":"component---src-pages-instana-lab-context-mdx","path":"/instana-lab/context/","result":{"pageContext":{"frontmatter":{"title":"Context Guide","description":"None"},"relativePagePath":"/instana-lab/context.mdx","titleType":"append","MdxNode":{"id":"1477f901-a8fd-5559-8550-56342d7b2746","children":[],"parent":"a8ec68d6-4715-5b2f-9fde-93086b45edaa","internal":{"content":"---\ntitle: Context Guide\ndescription: None\n---\n\n<PageDescription>\n\nIn this part of the the lab you will learn how to use the context guide and its benefits in Instana.\n\n</PageDescription>\n\n## The Context Guide\n\nYou might have noticed two dropdown menues, `Stack` and `Upstream / Downstream` in the top area of your views. \n![instana-context-buttons](./images/instana-context-buttons.png)\n\nThey are available on all dashboards like infrastructure, kubernetes, application dashboards and help to understand the context of the component you are currently viewing.\nThe contest guide is a visual representation of application prespective services and the related underlying infrastructure. Underneath this capability is Instanas **Dynamic Graph**, a component in which all physical components of the infrastructure are tracked and associated with their logical counterparts - all kept automatically up-to-date, even when changes occur.\nClick [Dynamic Graph](https://www.instana.com/docs/dynamic_graph/) if you want to dig deeper to understand the [Dynamic Graph](https://www.instana.com/docs/dynamic_graph/).\n\n## Stack\n\nThe Stack dropdown button shows the different application perspective services and infrastructure linked to your dasboard component.\nYou find three tabs:\n* Application\n* Kubernetes\n* Infrastructure\n\n**Applicaiton** provides an application centric view which help to understand to which application the component belongs, which services are related and which endpoints. You can click on eahc of them to navigate to that entity.\nThe **Kubernetes** tab of the Context Guide will list Kubernetes resources like Clusters, Deployments, Pods, Services, etc.\nWhereas **Infrastructure** provides you a physical infrastructure view on related components like Hosts, Processes, Docker Container, Java Virtual Machines or others.\n\n<Row>\n  <Column colMd={4} colLg={4} noGutterMdLeft>\n\n![instana-context-buttons](./images/instana-stack-app.png)\n\n  </Column>\n  <Column colMd={4} colLg={4} noGutterMdLeft>\n\n![instana-context-buttons](./images/instana-stack-k8s.png)\n\n  </Column>\n  <Column colMd={4} colLg={4} noGutterMdLeft>\n\n![instana-context-buttons](./images/instana-stack-infra.png)\n\n  </Column>\n</Row>\n\n\n## Upstream/Downstream\n\nThe Upstream/Downstream will help you with the visualization and navigation to the dependencies of an application, service or endpoint, an infrastructure entity or a kubernetes entity.\n\nThe information on the Upstream tab is helpful to identify which services and applications are impacted when the current component has an issues with things like high latency or errors. It shows services and application that that call the current entity directly and also calls from upstream services that are not monitored by Instana which will be grouped under \"Not Monitored By Instana\".\n\nThe Downstream information is helpful for finding out what services and applications the current entity depends on that are experiencing similar issues and may be the root cause. The Downstream tab shows services and applications that the current entity is directly calling.\n\n\n## Using the Context Guide\n\nIf you think back to the [Observe your Environment](/instana-lab/observe) part of the lab, how would Context Guide have helped to identify the root case of the issue more quickly instead of navigating through all views?\n\nLet's get familar with the Context guide\n\n1. Navigate to the **cart** node.js application dashboard\n\n<Accordion>\n  <AccordionItem title=\"Hint\">\n\nThis can be easily done through selecting your host on the infrastructure view, scroll down in the hostmenue that popup to Node.js Apps, select cart v1.0.0 from the dropdown list and click **Open Dashboard**\n\n  </AccordionItem>\n</Accordion>\n\n2. Can you figure out the following information and where to find it?\n\n* How is this application exposed\n* Which IP-Adress has the kubernetes node the application is running?\n* What is the process name of the application in the container?\n\n<Accordion>\n  <AccordionItem title=\"Hint\">\n\nThe place to look for this information is under **Stack**\n\nYou should have figured out the application is exposed to other services through a service called `cart` on the **Application** or tab.\n* If you click on the service you can see that it is a HTTP Service.\n* Under Flow you get an visual repesentation from where the cart service is called and who what it is calling.\n\nOn the **Kubernetes** tab you can get details about the Service and how it is defined in kubernetes (Details).\n\nAlso on the **Kubernetes* tab you find the IP-Adress of the kubernetes node on which the container with the application runs.\n\nFinally you should have found the process of the application inside the k8s container on the **Infrastructure** tab - server.js\n\n  </AccordionItem>\n</Accordion>\n\n3. Can you figure out which service the cart application calls?\n\n<Accordion>\n  <AccordionItem title=\"Hint\">\n\nFor sure you looked under **Upstream / Downstream** ;o)\n\nOn the tab **Downstream** you should have figured out that it calls the redis service and the catalogue service\n\n  </AccordionItem>\n</Accordion>\n\nIn this lab we are using a rather simple application, if you have a more complex application the **Context Guide** will really simplify the understanding of your environment and speed-up problem identification and resolution.\n\n","type":"Mdx","contentDigest":"b45ba1e6196fb93e26700fbe3b303fd8","owner":"gatsby-plugin-mdx","counter":296},"frontmatter":{"title":"Context Guide","description":"None"},"exports":{},"rawBody":"---\ntitle: Context Guide\ndescription: None\n---\n\n<PageDescription>\n\nIn this part of the the lab you will learn how to use the context guide and its benefits in Instana.\n\n</PageDescription>\n\n## The Context Guide\n\nYou might have noticed two dropdown menues, `Stack` and `Upstream / Downstream` in the top area of your views. \n![instana-context-buttons](./images/instana-context-buttons.png)\n\nThey are available on all dashboards like infrastructure, kubernetes, application dashboards and help to understand the context of the component you are currently viewing.\nThe contest guide is a visual representation of application prespective services and the related underlying infrastructure. Underneath this capability is Instanas **Dynamic Graph**, a component in which all physical components of the infrastructure are tracked and associated with their logical counterparts - all kept automatically up-to-date, even when changes occur.\nClick [Dynamic Graph](https://www.instana.com/docs/dynamic_graph/) if you want to dig deeper to understand the [Dynamic Graph](https://www.instana.com/docs/dynamic_graph/).\n\n## Stack\n\nThe Stack dropdown button shows the different application perspective services and infrastructure linked to your dasboard component.\nYou find three tabs:\n* Application\n* Kubernetes\n* Infrastructure\n\n**Applicaiton** provides an application centric view which help to understand to which application the component belongs, which services are related and which endpoints. You can click on eahc of them to navigate to that entity.\nThe **Kubernetes** tab of the Context Guide will list Kubernetes resources like Clusters, Deployments, Pods, Services, etc.\nWhereas **Infrastructure** provides you a physical infrastructure view on related components like Hosts, Processes, Docker Container, Java Virtual Machines or others.\n\n<Row>\n  <Column colMd={4} colLg={4} noGutterMdLeft>\n\n![instana-context-buttons](./images/instana-stack-app.png)\n\n  </Column>\n  <Column colMd={4} colLg={4} noGutterMdLeft>\n\n![instana-context-buttons](./images/instana-stack-k8s.png)\n\n  </Column>\n  <Column colMd={4} colLg={4} noGutterMdLeft>\n\n![instana-context-buttons](./images/instana-stack-infra.png)\n\n  </Column>\n</Row>\n\n\n## Upstream/Downstream\n\nThe Upstream/Downstream will help you with the visualization and navigation to the dependencies of an application, service or endpoint, an infrastructure entity or a kubernetes entity.\n\nThe information on the Upstream tab is helpful to identify which services and applications are impacted when the current component has an issues with things like high latency or errors. It shows services and application that that call the current entity directly and also calls from upstream services that are not monitored by Instana which will be grouped under \"Not Monitored By Instana\".\n\nThe Downstream information is helpful for finding out what services and applications the current entity depends on that are experiencing similar issues and may be the root cause. The Downstream tab shows services and applications that the current entity is directly calling.\n\n\n## Using the Context Guide\n\nIf you think back to the [Observe your Environment](/instana-lab/observe) part of the lab, how would Context Guide have helped to identify the root case of the issue more quickly instead of navigating through all views?\n\nLet's get familar with the Context guide\n\n1. Navigate to the **cart** node.js application dashboard\n\n<Accordion>\n  <AccordionItem title=\"Hint\">\n\nThis can be easily done through selecting your host on the infrastructure view, scroll down in the hostmenue that popup to Node.js Apps, select cart v1.0.0 from the dropdown list and click **Open Dashboard**\n\n  </AccordionItem>\n</Accordion>\n\n2. Can you figure out the following information and where to find it?\n\n* How is this application exposed\n* Which IP-Adress has the kubernetes node the application is running?\n* What is the process name of the application in the container?\n\n<Accordion>\n  <AccordionItem title=\"Hint\">\n\nThe place to look for this information is under **Stack**\n\nYou should have figured out the application is exposed to other services through a service called `cart` on the **Application** or tab.\n* If you click on the service you can see that it is a HTTP Service.\n* Under Flow you get an visual repesentation from where the cart service is called and who what it is calling.\n\nOn the **Kubernetes** tab you can get details about the Service and how it is defined in kubernetes (Details).\n\nAlso on the **Kubernetes* tab you find the IP-Adress of the kubernetes node on which the container with the application runs.\n\nFinally you should have found the process of the application inside the k8s container on the **Infrastructure** tab - server.js\n\n  </AccordionItem>\n</Accordion>\n\n3. Can you figure out which service the cart application calls?\n\n<Accordion>\n  <AccordionItem title=\"Hint\">\n\nFor sure you looked under **Upstream / Downstream** ;o)\n\nOn the tab **Downstream** you should have figured out that it calls the redis service and the catalogue service\n\n  </AccordionItem>\n</Accordion>\n\nIn this lab we are using a rather simple application, if you have a more complex application the **Context Guide** will really simplify the understanding of your environment and speed-up problem identification and resolution.\n\n","fileAbsolutePath":"/Users/mkeppel/Documents/GitHub/think-labs/src/pages/instana-lab/context.mdx"}}},"staticQueryHashes":["1054721580","1054721580","1364590287","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","768070550"]}