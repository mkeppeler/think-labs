{"componentChunkName":"component---src-pages-instana-lab-instana-lab-analyse-mdx","path":"/instana-lab/instana-lab/analyse/","result":{"pageContext":{"frontmatter":{"title":"Analyze an Issue","description":"None"},"relativePagePath":"/instana-lab/instana-lab/analyse.mdx","titleType":"append","MdxNode":{"id":"28db0e0e-eb3a-5c95-af70-b28f519d5c43","children":[],"parent":"bede2d2e-0681-56b4-97de-b9dcb67ad871","internal":{"content":"---\ntitle: Analyze an Issue\ndescription: None\n---\n\n<PageDescription>\n\nIn this section we will create and issue and see how Instana reacts and helps us to find and fix the root cause.\n\n</PageDescription>\n\n## Issue Analysis with Instana\n\nA platform, infrastructure and application landscape observed by Instana is automatically subject to outliers detection and issue creation. Furthermore, Instana generally thinks of problems in two terms, issues and incidents.\n\n[Issues](https://www.instana.com/docs/root_cause_analysis/#issues) are independent problems in specific elements or components of the overall landscape. That said, an issue, like _Sudden Increase in Error Rate_, can happen in multiple components at the same time, if they somehow depend on each other and bubble errors. The same way, though, a single component can have multiple issues simultanously, such as _Sudden Increase in Latency_ and _Sudden Increase in Error Rate_ if the database becomes slow and some requests are still responded to, even if super slow, and others are cancelled due to timeouts. In any case, Instana creates issues.\n\n![instana-issues](./images/instana-issues.png)\n\n\nOn the other hand, Instana takes all those issues and correlates them based on the so-called [Dynamic Graph](https://www.instana.com/docs/dynamic_graph/). The Dynamic Graph is an automatically updated graph (visualization) of all elements of the observed system landscape. Based on this graph, Instana finds out which components depend on each other, and what those dependencies mean. The result of this correlation process is an [Incident](https://www.instana.com/docs/root_cause_analysis/#incidents), containing all issues that are somehow related.\n\n![instana-incidents](./images/instana-incidents.png)\n\nThat means, if the database has an outage and your services throw errors, Instana will create an incident with all those issues correlated into it. This help giving a quick overview of the size of the problem, the impacted services / components and the root cause of the issue, e.g. an offline database.\n\n![instana-dynamic-graph](./images/instana-dynamic-graph.png)\n\n\nAt the same time, Instana collects Distributed Trace information. That means, as a developer of a specific service, I see the user's request in all it's glory moving through the different services and stack components involved in generating the response. Given that, it is easy to grasp the cause of an issue from any downstream service.\n\nGoing back to our database example, the developer can immediate see (in the stack trace like view), which component is responsible for an error being received by the service. That helps bringing a quick understanding of whome to contact to get the issue fixed, instead of pushing a ticket through the different downstream layers.\n\n![instana-distributed-trace](./images/instana-distributed-trace.png)\n\n## Creating an Issue\n\nTo analyze an issue, we first need one. In this section we will create this issue manually, which means, that we already know the root cause. This, however, helps when working with Instana for the first time.\n\nTo create an issue with multiple services, we scale down the MySQL to 0 replicas, which basically takes the MySQL database offline. All depending services will start throwing issues eventually. To scale down the database, run:\n\n```bash\nkubectl scale deployments/mysql --replicas=0\n```\n\nAfter a few moments, the depending services throw errors on requests and Instana will pick up the problems as issues and correlates them into incidents.\n\n![instana-incident](./images/instana-incident.png)\n\n## Analyze the Problem\n\nImagine you don't know what the issue is. In this case Instana offers quite a few locations that help you understand an issue.\n\nThe way to understand an issue may be different from user to user and role to role, however, common elements to get deeper insight into the problems at hand are: the Incident view, the Issue view, the Application view, Distributed Traces in requests, the End-User Monitoring, and more.\n\nIn our imaginary situation there is a set of questions to answer. Use Instana to find the answers to the questions below and help fix the issue.\n\n- What services are affected by the incident?\n- What is the user impact?\n- Which teams need to be notified of the problem?\n- What is the root cause?\n- How can it be fixed?\n- How could this issue be prevented in the future?\n\nCongratulations, you found the answers to the important questions and helped speed up the time to recovery.\n","type":"Mdx","contentDigest":"c24b349baaaf42cf36759dfcfa05516c","owner":"gatsby-plugin-mdx","counter":352},"frontmatter":{"title":"Analyze an Issue","description":"None"},"exports":{},"rawBody":"---\ntitle: Analyze an Issue\ndescription: None\n---\n\n<PageDescription>\n\nIn this section we will create and issue and see how Instana reacts and helps us to find and fix the root cause.\n\n</PageDescription>\n\n## Issue Analysis with Instana\n\nA platform, infrastructure and application landscape observed by Instana is automatically subject to outliers detection and issue creation. Furthermore, Instana generally thinks of problems in two terms, issues and incidents.\n\n[Issues](https://www.instana.com/docs/root_cause_analysis/#issues) are independent problems in specific elements or components of the overall landscape. That said, an issue, like _Sudden Increase in Error Rate_, can happen in multiple components at the same time, if they somehow depend on each other and bubble errors. The same way, though, a single component can have multiple issues simultanously, such as _Sudden Increase in Latency_ and _Sudden Increase in Error Rate_ if the database becomes slow and some requests are still responded to, even if super slow, and others are cancelled due to timeouts. In any case, Instana creates issues.\n\n![instana-issues](./images/instana-issues.png)\n\n\nOn the other hand, Instana takes all those issues and correlates them based on the so-called [Dynamic Graph](https://www.instana.com/docs/dynamic_graph/). The Dynamic Graph is an automatically updated graph (visualization) of all elements of the observed system landscape. Based on this graph, Instana finds out which components depend on each other, and what those dependencies mean. The result of this correlation process is an [Incident](https://www.instana.com/docs/root_cause_analysis/#incidents), containing all issues that are somehow related.\n\n![instana-incidents](./images/instana-incidents.png)\n\nThat means, if the database has an outage and your services throw errors, Instana will create an incident with all those issues correlated into it. This help giving a quick overview of the size of the problem, the impacted services / components and the root cause of the issue, e.g. an offline database.\n\n![instana-dynamic-graph](./images/instana-dynamic-graph.png)\n\n\nAt the same time, Instana collects Distributed Trace information. That means, as a developer of a specific service, I see the user's request in all it's glory moving through the different services and stack components involved in generating the response. Given that, it is easy to grasp the cause of an issue from any downstream service.\n\nGoing back to our database example, the developer can immediate see (in the stack trace like view), which component is responsible for an error being received by the service. That helps bringing a quick understanding of whome to contact to get the issue fixed, instead of pushing a ticket through the different downstream layers.\n\n![instana-distributed-trace](./images/instana-distributed-trace.png)\n\n## Creating an Issue\n\nTo analyze an issue, we first need one. In this section we will create this issue manually, which means, that we already know the root cause. This, however, helps when working with Instana for the first time.\n\nTo create an issue with multiple services, we scale down the MySQL to 0 replicas, which basically takes the MySQL database offline. All depending services will start throwing issues eventually. To scale down the database, run:\n\n```bash\nkubectl scale deployments/mysql --replicas=0\n```\n\nAfter a few moments, the depending services throw errors on requests and Instana will pick up the problems as issues and correlates them into incidents.\n\n![instana-incident](./images/instana-incident.png)\n\n## Analyze the Problem\n\nImagine you don't know what the issue is. In this case Instana offers quite a few locations that help you understand an issue.\n\nThe way to understand an issue may be different from user to user and role to role, however, common elements to get deeper insight into the problems at hand are: the Incident view, the Issue view, the Application view, Distributed Traces in requests, the End-User Monitoring, and more.\n\nIn our imaginary situation there is a set of questions to answer. Use Instana to find the answers to the questions below and help fix the issue.\n\n- What services are affected by the incident?\n- What is the user impact?\n- Which teams need to be notified of the problem?\n- What is the root cause?\n- How can it be fixed?\n- How could this issue be prevented in the future?\n\nCongratulations, you found the answers to the important questions and helped speed up the time to recovery.\n","fileAbsolutePath":"/Users/mkeppel/Documents/GitHub/think-labs/src/pages/instana-lab/instana-lab/analyse.mdx"}}},"staticQueryHashes":["1054721580","1054721580","1364590287","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","768070550"]}